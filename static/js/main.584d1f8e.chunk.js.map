{"version":3,"sources":["assets/nyan-small.gif","shared.js","getWeb3.js","Staking.js","Pump.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","web3","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","Web3","enable","console","log","provider","providers","HttpProvider","Staking","state","loaded","stakeAmount","stakedAmount","isApproved","isApproving","isStaking","isWithdrawing","catnipRewards","handleClick","props","toggle","stakeNyan","setState","catnipInstance","methods","stake","utils","toWei","toString","send","from","accounts","gas","stakeRes","getMyStakeAmount","withdrawNyan","withdraw","approveNyan","nyanInstance","approve","_address","getAddressStakeAmount","call","stakeA","fromWei","getCatnipRewards","myRewardsBalance","cRewards","claimRewards","getReward","componentDidMount","eth","getAccounts","net","getId","networkId","Contract","NyanToken","abi","networks","address","CatnipToken","alert","error","e","this","target","value","className","onClick","placeholder","onChange","updateStakingInput","bind","type","disabled","Component","Pump","App","isViewingStaking","isViewingPump","nyanBalance","totalNyanSupply","totalNyanStaked","totalCatnipSupply","getNyanBalance","balanceOf","_nyanBalance","getNyanSupply","totalSupply","_nyanSupply","totalStakedSupply","_totalNyanStaked","getCatnipSupply","_catnipSupply","setNyanAddress","toggleStakingView","togglePumpView","_getWeb3","_web3","styles","backgroundImage","nyanGif","href","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"09xbAAAA,EAAOC,QAAU,IAA0B,wC,mHCAvCC,E,kICqCWC,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBR,EAAO,IAAIS,IAAKJ,OAAOG,UAHD,kBAMpBH,OAAOG,SAASE,SANI,OAQ1BP,EAAQH,GARkB,gDAU1BI,EAAO,EAAD,IAVoB,gCAcrBC,OAAOL,MAERA,EAAOK,OAAOL,KACpBW,QAAQC,IAAI,2BACZT,EAAQH,KAIFa,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIf,EAAO,IAAIS,IAAKI,GACtBF,QAAQC,IAAI,gDACZT,EAAQH,IA3BoB,8D,ICEfgB,E,2MAErBC,MAAQ,CACJC,QAAQ,EACRC,YAAa,EACbC,aAAc,EACdC,YAAY,EACZC,aAAa,EACbC,WAAW,EACXC,eAAe,EACfC,cAAe,G,EAGjBC,YAAc,WACZ,EAAKC,MAAMC,U,EAObC,U,sBAAY,4BAAAtB,EAAA,0DACN,EAAKU,MAAMM,UADL,wDAIV,EAAKO,SAAS,CAACP,WAAW,IAJhB,kBAMe,EAAKQ,eAAeC,QAAQC,MAAM,EAAKjC,KAAKkC,MAAMC,MAAM,EAAKlB,MAAME,YAAYiB,aAAaC,KAAK,CAClHC,KAAM,EAAKC,SAAS,GACpBC,IAAK,MARH,OAMFC,EANE,OAUN9B,QAAQC,IAAI6B,GACRA,EAAQ,SACR,EAAKX,SAAS,CAACP,WAAW,EAAOF,YAAY,EAAOF,YAAa,IACjE,EAAKuB,oBAbH,kDAgBN/B,QAAQC,IAAR,MAhBM,0D,EAqBZ+B,a,sBAAe,sBAAApC,EAAA,0DACT,EAAKU,MAAMO,cADF,wDAIb,EAAKM,SAAS,CAACN,eAAe,IAJjB,kBAMc,EAAKO,eAAeC,QAAQY,SAAS,EAAK5C,KAAKkC,MAAMC,MAAM,EAAKlB,MAAME,YAAYiB,aAAaC,KAAK,CACvHC,KAAM,EAAKC,SAAS,GACpBC,IAAK,MARA,cAWK,SACV,EAAKV,SAAS,CAACN,eAAe,EAAOL,YAAa,IAClD,EAAKuB,oBAbA,kDAgBT/B,QAAQC,IAAR,MAhBS,0D,EAoBfiC,Y,sBAAc,sBAAAtC,EAAA,0DACR,EAAKU,MAAMK,YADH,wDAIZ,EAAKQ,SAAS,CAACR,aAAa,IAJhB,SAMe,EAAKwB,aAAad,QAAQe,QAAQ,EAAKhB,eAAeiB,SAAU,EAAKhD,KAAKkC,MAAMC,MAAM,EAAKlB,MAAME,YAAYiB,aAAaC,KAAK,CACtJC,KAAM,EAAKC,SAAS,GACpBC,IAAK,MARG,cAWM,QACd,EAAKV,SAAS,CAACR,aAAa,EAAOD,YAAY,IAZvC,2C,EAiBdqB,iB,sBAAmB,4BAAAnC,EAAA,6DACjBI,QAAQC,IAAI,QADK,SAEE,EAAKmB,eAAeC,QAAQiB,sBAAsB,EAAKV,SAAS,IAAIW,OAFtE,OAEbC,EAFa,OAGjBxC,QAAQC,IAAIuC,GAEZ,EAAKrB,SAAS,CAACV,aAAc,EAAKpB,KAAKkC,MAAMkB,QAAQD,KALpC,2C,EAQnBE,iB,sBAAmB,4BAAA9C,EAAA,sEAEI,EAAKwB,eAAeC,QAAQsB,iBAAiB,EAAKf,SAAS,IAAIW,OAFnE,OAEbK,EAFa,OAIjB,EAAKzB,SAAS,CAACL,cAAe,EAAKzB,KAAKkC,MAAMkB,QAAQG,KAJrC,2C,EAOnBC,a,sBAAe,sBAAAjD,EAAA,sEACK,EAAKwB,eAAeC,QAAQyB,YAAYpB,KAAK,CAC3DC,KAAM,EAAKC,SAAS,GACpBC,IAAK,MAHI,cAMb,EAAKa,mBANQ,2C,EASfK,kB,sBAAoB,sBAAAnD,EAAA,sEAGhB,EAAKP,KF1GAA,EEuGW,SAQM,EAAKA,KAAK2D,IAAIC,cARpB,cAQhB,EAAKrB,SARW,gBAWO,EAAKvC,KAAK2D,IAAIE,IAAIC,QAXzB,OAWhB,EAAKC,UAXW,OAahB,EAAKjB,aAAe,IAAI,EAAK9C,KAAK2D,IAAIK,SACpCC,EAAUC,IACVD,EAAUE,SAAS,EAAKJ,YAAcE,EAAUE,SAAS,EAAKJ,WAAWK,SAG3E,EAAKrC,eAAiB,IAAI,EAAK/B,KAAK2D,IAAIK,SACtCK,EAAYH,IACZG,EAAYF,SAAS,EAAKJ,YAAcM,EAAYF,SAAS,EAAKJ,WAAWK,SAG/E,EAAK1B,mBACL,EAAKW,mBAIL,EAAKvB,SAAS,CAACZ,QAAQ,IA5BP,kDA+BhBoD,MAAM,0EAGN3D,QAAQ4D,MAAR,MAlCgB,0D,kFAtFDC,GACjBC,KAAK3C,SAAS,CAACX,YAAaqD,EAAEE,OAAOC,U,+BA4HrC,OACE,yBAAKC,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,QAAQC,QAASJ,KAAK/C,aAAtC,QAGA,0CACA,8CAAoB+C,KAAKxD,MAAMG,cAC7B,6BACI,2BACAwD,UAAU,QACVE,YAAY,IACZH,MAAOF,KAAKxD,MAAME,YAClB4D,SAAUN,KAAKO,mBAAmBC,KAAKR,MACvCS,KAAK,YAIT,6BACET,KAAKxD,MAAMI,WAGJ,KAHiB,yBAAKuD,UAAU,eAAeC,QAASJ,KAAK5B,aAChE4B,KAAKxD,MAAMK,YAA2C,KAA7B,gDAC1BmD,KAAKxD,MAAMK,YAAc,6CAA0B,MAEvDmD,KAAKxD,MAAMI,WAAa,yBAAKuD,UAAU,eAAeC,QAASJ,KAAK5C,WAC/D4C,KAAKxD,MAAMM,UAAuC,KAA3B,8CACxBkD,KAAKxD,MAAMM,UAAY,2CAAwB,MAC3C,KACT,yBAAKqD,UAAU,eAAeC,QAASJ,KAAK9B,cACtC8B,KAAKxD,MAAMO,cAAsC,KAAtB,yCAC5BiD,KAAKxD,MAAMO,cAAgB,+CAA4B,MAG5D,0CACA,6BACI,2BAAOoD,UAAU,QAAQO,UAAQ,EACjCR,MAAOF,KAAKxD,MAAMQ,cAClBqD,YAAY,IAAII,KAAK,YAEzB,6BACA,yBAAKN,UAAU,eAAeC,QAASJ,KAAKjB,cAA5C,e,GArLyB4B,aCLhBC,E,2MACnB3D,YAAc,WACZ,EAAKC,MAAMC,U,wEAMX,OACE,yBAAKgD,UAAU,SACb,yBAAKA,UAAU,iBACb,0BAAMA,UAAU,QAAQC,QAASJ,KAAK/C,aAAtC,QAGA,yCACE,oDAEA,6BACI,6FAGJ,6BACI,mGAGJ,6BACI,2OAKJ,6BACI,uIAIJ,yBAAKkD,UAAU,eAAf,sC,GApCsBQ,a,yBCqKnBE,E,2MA1JbrE,MAAQ,CACNsE,kBAAmB,EACnBC,eAAe,EACfC,YAAa,EACbC,gBAAiB,EACjBC,gBAAiB,EACjBC,kBAAmB,G,EAKpBC,e,sBAAiB,4BAAAtF,EAAA,6DACfI,QAAQC,IAAI,EAAK2B,SAAS,IADX,SAEU,EAAKO,aAAad,QAAQ8D,UAAU,EAAKvD,SAAS,IAAIW,OAFhE,OAEX6C,EAFW,OAGhBpF,QAAQC,IAAImF,GACX,EAAKjE,SAAS,CACZ2D,YAAa,EAAKzF,KAAKkC,MAAMkB,QAAQ2C,KALxB,2C,EASjBC,c,sBAAgB,4BAAAzF,EAAA,sEACS,EAAKuC,aAAad,QAAQiE,cAAc/C,OADjD,OACXgD,EADW,OAEfvF,QAAQC,IAAIsF,GACZ,EAAKpE,SAAS,CACZ4D,gBAAiB,EAAK1F,KAAKkC,MAAMkB,QAAQ8C,KAJ5B,2C,EAQjBP,gB,sBAAkB,4BAAApF,EAAA,sEACY,EAAKwB,eAAeC,QAAQmE,oBAAoBjD,OAD5D,OACbkD,EADa,OAEjBzF,QAAQC,IAAIwF,GAEZ,EAAKtE,SAAS,CACZ6D,gBAAiB,EAAK3F,KAAKkC,MAAMkB,QAAQgD,KAL1B,2C,EASnBC,gB,sBAAkB,4BAAA9F,EAAA,sEACS,EAAKwB,eAAeC,QAAQiE,cAAc/C,OADnD,OACboD,EADa,OAEjB3F,QAAQC,IAAI0F,GAEZ,EAAKxE,SAAS,CACZ8D,kBAAmB,EAAK5F,KAAKkC,MAAMkB,QAAQkD,KAL5B,2C,EAShBC,e,sBAAiB,sBAAAhG,EAAA,6DACfI,QAAQC,IAAI,EAAKkC,aAAaE,UADf,SAEQ,EAAKjB,eAAeC,QAAQuE,eAAe,EAAKzD,aAAaE,UAAUX,KAAK,CAClGC,KAAM,EAAKC,SAAS,GACpBC,IAAK,MAJS,yD,EAWjBgE,kBAAoB,WACnB,EAAK1E,SAAS,CACZyD,kBAAmB,EAAKtE,MAAMsE,oB,EAKlCkB,eAAiB,WACf,EAAK3E,SAAS,CACZ0D,eAAgB,EAAKvE,MAAMuE,iB,EAI/BkB,SAAW,WACT,OAAO,EAAK1G,M,EAGd0D,kB,sBAAoB,sBAAAnD,EAAA,+EAGEN,IAHF,cAGhB,EAAKD,KAHW,gBAMM,EAAKA,KAAK2D,IAAIC,cANpB,cAMhB,EAAKrB,SANW,gBASO,EAAKvC,KAAK2D,IAAIE,IAAIC,QATzB,OAShB,EAAKC,UATW,OAWhB,EAAKjB,aAAe,IAAI,EAAK9C,KAAK2D,IAAIK,SACpCC,EAAUC,IACVD,EAAUE,SAAS,EAAKJ,YAAcE,EAAUE,SAAS,EAAKJ,WAAWK,SAG3E,EAAKrC,eAAiB,IAAI,EAAK/B,KAAK2D,IAAIK,SACtCK,EAAYH,IACZG,EAAYF,SAAS,EAAKJ,YAAcM,EAAYF,SAAS,EAAKJ,WAAWK,SJvG7DuC,EI0GV,EAAK3G,KJzGfA,EAAO2G,EI2GL,EAAKX,gBACL,EAAKK,kBACL,EAAKV,kBAIL,EAAK7D,SAAS,CAACZ,QAAQ,GAAO,EAAK2E,gBA7BnB,kDAgChBvB,MAAM,0EAGN3D,QAAQ4D,MAAR,MAnCgB,kCJrFf,IAAiBoC,IIqFF,qB,wEAyClB,OAAKlC,KAAKxD,MAAMC,OAId,yBAAK0D,UAAU,OACb,yBAAKA,UAAU,QAAf,gBACA,yBAAKA,UAAU,YAAf,YAAoCH,KAAKxD,MAAMwE,YAA/C,UACA,yBAAKb,UAAU,aACnB,yBAAKA,UAAU,YAAf,sBAA8CH,KAAKxD,MAAMyE,iBACnD,yBAAKd,UAAU,YAAf,sBAA8CH,KAAKxD,MAAM0E,iBAC/D,yBAAKf,UAAU,YAAf,wBAAgDH,KAAKxD,MAAM2E,oBAEvD,yBAAKgB,OAAQ,CAACC,gBAAgB,OAAD,OAASC,IAAT,MAAsBlC,UAAU,aAC7D,yBAAKA,UAAU,eACb,yBAAKA,UAAU,eAAeC,QAASJ,KAAK+B,mBAC1C,sCAEF,yBAAK5B,UAAU,gBAAgBC,QAASJ,KAAKgC,gBAC7C,sCAKDhC,KAAKxD,MAAMsE,iBAAmB,kBAAC,EAAD,CAAS3D,OAAQ6C,KAAK+B,oBAAwB,KAC5E/B,KAAKxD,MAAMuE,cAAgB,kBAAC,EAAD,CAAM5D,OAAQ6C,KAAKgC,iBAAqB,KACpE,yBAAK7B,UAAU,cACb,yBAAKA,UAAU,kBAAkBC,QAASJ,KAAK8B,iBAC/C,uBAAG7B,OAAO,SAASqC,KAAM,uCACvB,yBAAKnC,UAAU,sBAEjB,uBAAGF,OAAO,SAASqC,KAAM,4BACvB,yBAAKnC,UAAU,wBA9Bd,4E,GArHKQ,aCAE4B,QACW,cAA7B3G,OAAO4G,SAASC,UAEe,UAA7B7G,OAAO4G,SAASC,UAEhB7G,OAAO4G,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.584d1f8e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nyan-small.38ec77e4.gif\";","let web3;\r\n\r\nexport function setWeb3(_web3) {\r\n    web3 = _web3\r\n}\r\n\r\nexport function getWeb3Var() {\r\n    return web3;\r\n}","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\r\nimport NyanToken from \"./contracts/NyanToken.json\";\r\nimport CatnipToken from \"./contracts/CatnipToken.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport {setWeb3, getWeb3Var} from \"./shared\";\r\nimport App from \"./App\";\r\n\r\nexport default class Staking extends Component {\r\n\r\nstate = {\r\n    loaded: false,\r\n    stakeAmount: 0,\r\n    stakedAmount: 0,\r\n    isApproved: false,\r\n    isApproving: false,\r\n    isStaking: false,\r\n    isWithdrawing: false,\r\n    catnipRewards: 0\r\n    };\r\n  \r\n  handleClick = () => {\r\n    this.props.toggle();\r\n  };\r\n\r\n  updateStakingInput(e) {\r\n    this.setState({stakeAmount: e.target.value})\r\n }\r\n\r\n  stakeNyan = async () => {\r\n    if (this.state.isStaking) {\r\n        return;\r\n    }                        \r\n    this.setState({isStaking: true});\r\n    try {\r\n        let stakeRes = await this.catnipInstance.methods.stake(this.web3.utils.toWei(this.state.stakeAmount.toString())).send({\r\n            from: this.accounts[0],\r\n            gas: 1000000\r\n        });\r\n        console.log(stakeRes);\r\n        if (stakeRes[\"status\"]) {\r\n            this.setState({isStaking: false, isApproved: false, stakeAmount: 0});\r\n            this.getMyStakeAmount();\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n\r\n  }\r\n\r\n  withdrawNyan = async () => {\r\n    if (this.state.isWithdrawing) {\r\n        return;\r\n    }\r\n    this.setState({isWithdrawing: true});\r\n    try {\r\n        let unstakeRes = await this.catnipInstance.methods.withdraw(this.web3.utils.toWei(this.state.stakeAmount.toString())).send({\r\n            from: this.accounts[0],\r\n            gas: 1000000\r\n        });\r\n    \r\n        if (unstakeRes[\"status\"]) {\r\n            this.setState({isWithdrawing: false, stakeAmount: 0});\r\n            this.getMyStakeAmount();\r\n        }\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n  }\r\n\r\n  approveNyan = async () => {\r\n    if (this.state.isApproving) {\r\n        return;\r\n    }  \r\n    this.setState({isApproving: true});\r\n    \r\n    let approveStaking = await this.nyanInstance.methods.approve(this.catnipInstance._address, this.web3.utils.toWei(this.state.stakeAmount.toString())).send({\r\n        from: this.accounts[0],\r\n        gas: 1000000\r\n    });\r\n    \r\n    if (approveStaking[\"status\"]) {\r\n        this.setState({isApproving: false, isApproved: true});\r\n        \r\n    }\r\n  }\r\n\r\n  getMyStakeAmount = async () => {\r\n    console.log('here');\r\n    let stakeA = await this.catnipInstance.methods.getAddressStakeAmount(this.accounts[0]).call();\r\n    console.log(stakeA)\r\n    \r\n    this.setState({stakedAmount: this.web3.utils.fromWei(stakeA)});\r\n  }\r\n\r\n  getCatnipRewards = async () => {\r\n    \r\n    let cRewards = await this.catnipInstance.methods.myRewardsBalance(this.accounts[0]).call();\r\n    \r\n    this.setState({catnipRewards: this.web3.utils.fromWei(cRewards)});\r\n  }\r\n\r\n  claimRewards = async () => {\r\n    let claim = await this.catnipInstance.methods.getReward().send({\r\n        from: this.accounts[0],\r\n        gas: 1000000\r\n    });\r\n    \r\n    this.getCatnipRewards();\r\n  }\r\n\r\n  componentDidMount = async () => {\r\n\r\n    try {\r\n      this.web3 = getWeb3Var();\r\n        \r\n      // Get network provider and web3 instance.\r\n     \r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n    \r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n\r\n      this.nyanInstance = new this.web3.eth.Contract(\r\n        NyanToken.abi,\r\n        NyanToken.networks[this.networkId] && NyanToken.networks[this.networkId].address,\r\n      );\r\n\r\n      this.catnipInstance = new this.web3.eth.Contract(\r\n        CatnipToken.abi,\r\n        CatnipToken.networks[this.networkId] && CatnipToken.networks[this.networkId].address,\r\n      );\r\n\r\n      this.getMyStakeAmount();\r\n      this.getCatnipRewards();\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({loaded: true});\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal_content\">\r\n          <span className=\"close\" onClick={this.handleClick}>\r\n            &times;\r\n          </span>\r\n          <h1>STAKE NYAN</h1>\r\n          <h4>Amount staked: {this.state.stakedAmount}</h4>\r\n            <div>\r\n                <input \r\n                className=\"input\" \r\n                placeholder=\"0\"\r\n                value={this.state.stakeAmount} \r\n                onChange={this.updateStakingInput.bind(this)}\r\n                type=\"number\">\r\n\r\n                </input>\r\n            </div>\r\n            <br />\r\n            {!this.state.isApproved ? <div className=\"stake-button\" onClick={this.approveNyan}>\r\n                {!this.state.isApproving ? <div>STEP 1: APPROVE</div> : null}\r\n                {this.state.isApproving ? <div>APPROVING...</div> : null}\r\n            </div> : null}\r\n            {this.state.isApproved ? <div className=\"stake-button\" onClick={this.stakeNyan}>\r\n                {!this.state.isStaking ? <div>STEP 2: STAKE</div> : null}\r\n                {this.state.isStaking ? <div>STAKING...</div> : null}\r\n            </div> : null}\r\n            <div className=\"stake-button\" onClick={this.withdrawNyan}>\r\n                {!this.state.isWithdrawing ? <div>WITHDRAW</div> : null}\r\n                {this.state.isWithdrawing ? <div>WITHDRAWING...</div> : null}\r\n            </div>\r\n\r\n            <h1>GET CATNIP</h1>\r\n            <div>\r\n                <input className=\"input\" disabled \r\n                value={this.state.catnipRewards}\r\n                placeholder=\"0\" type=\"number\"></input>\r\n            </div>\r\n            <br />\r\n            <div className=\"stake-button\" onClick={this.claimRewards}>CLAIM</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class Pump extends Component {\r\n  handleClick = () => {\r\n    this.props.toggle();\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal_content\">\r\n          <span className=\"close\" onClick={this.handleClick}>\r\n            &times;\r\n          </span>\r\n          <h1>PUMP FUND</h1>\r\n            <h3>Let's build a whale!</h3>\r\n\r\n            <div>\r\n                <p>NYAN is introducing a publically governed Uniswap Hedge fund.</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <p>20% of all minted Catnip goes to a funding contract every few days.</p>\r\n            </div>\r\n          \r\n            <div>\r\n                <p>NYAN holders will be able to vote on which Uniswap token the contract will swap for. \r\n                    The contract will hold the token for a specified amount of blocks or until NYAN holders\r\n                    vote for a swap back to Catnip</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <p>During a swap back to Catnip, the resulting Catnip will\r\n                    be proportionately distributed to NYAN holders.</p>\r\n            </div>\r\n\r\n            <div className=\"launch-date\">Voting starts late September</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport Staking from \"./Staking\";\nimport Pump from \"./Pump\";\nimport NyanToken from \"./contracts/NyanToken.json\";\nimport CatnipToken from \"./contracts/CatnipToken.json\";\nimport getWeb3 from \"./getWeb3\";\nimport {setWeb3, getWeb3Var} from \"./shared\";\n\nimport \"./App.css\";\n\nimport nyanGif from './assets/nyan-small.gif';\n\nclass App extends Component {\n  state = {\n    isViewingStaking : false,\n    isViewingPump: false,\n    nyanBalance: 0,\n    totalNyanSupply: 0,\n    totalNyanStaked: 0,\n    totalCatnipSupply: 0\n   };\n\n   \n\n   getNyanBalance = async () => {\n     console.log(this.accounts[0]);\n     let _nyanBalance = await this.nyanInstance.methods.balanceOf(this.accounts[0]).call();\n    console.log(_nyanBalance);\n     this.setState({\n       nyanBalance: this.web3.utils.fromWei(_nyanBalance)\n     })\n   }\n\n   getNyanSupply = async () => {\n    let _nyanSupply = await this.nyanInstance.methods.totalSupply().call();\n    console.log(_nyanSupply);\n    this.setState({\n      totalNyanSupply: this.web3.utils.fromWei(_nyanSupply)\n    })\n  }\n\n  totalNyanStaked = async () => {\n   let _totalNyanStaked = await this.catnipInstance.methods.totalStakedSupply().call();\n   console.log(_totalNyanStaked);\n\n   this.setState({\n     totalNyanStaked: this.web3.utils.fromWei(_totalNyanStaked)\n   })\n }\n\n getCatnipSupply = async () => {\n  let _catnipSupply = await this.catnipInstance.methods.totalSupply().call();\n  console.log(_catnipSupply);\n\n  this.setState({\n    totalCatnipSupply: this.web3.utils.fromWei(_catnipSupply)\n  })\n}\n\n   setNyanAddress = async () => {\n     console.log(this.nyanInstance._address);\n     let addressSet = await this.catnipInstance.methods.setNyanAddress(this.nyanInstance._address).send({\n      from: this.accounts[0],\n      gas: 1000000\n     });\n   }\n\n   \n   \n\n   toggleStakingView = () => {\n    this.setState({\n      isViewingStaking: !this.state.isViewingStaking\n    });\n  };\n\n\n  togglePumpView = () => {\n    this.setState({\n      isViewingPump: !this.state.isViewingPump\n    })\n  }\n\n  _getWeb3 = () => {\n    return this.web3;\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n\n      this.nyanInstance = new this.web3.eth.Contract(\n        NyanToken.abi,\n        NyanToken.networks[this.networkId] && NyanToken.networks[this.networkId].address,\n      );\n\n      this.catnipInstance = new this.web3.eth.Contract(\n        CatnipToken.abi,\n        CatnipToken.networks[this.networkId] && CatnipToken.networks[this.networkId].address,\n      );\n\n      setWeb3(this.web3);\n      \n      this.getNyanSupply()\n      this.getCatnipSupply();\n      this.totalNyanStaked();\n    \n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({loaded: true}, this.getNyanBalance);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div className=\"Logo\">NYAN.FINANCE</div>\n        <div className=\"Nyan-bal\">You have {this.state.nyanBalance} NYAN </div>\n        <div className=\"stats-box\">\n    <div className=\"stats-op\">Total Nyan Supply: {this.state.totalNyanSupply}</div>\n          <div className=\"stats-op\">Total Nyan Staked: {this.state.totalNyanStaked}</div>\n    <div className=\"stats-op\">Total Catnip Supply: {this.state.totalCatnipSupply}</div>\n        </div>\n        <div styles={{backgroundImage: `url(${nyanGif})`}} className=\"Nyan-cat\"></div>\n        <div className=\"Options-box\">\n          <div className=\"Option stake\" onClick={this.toggleStakingView}>\n            <h3>STAKE</h3>\n          </div>\n          <div className=\"Option pumped\" onClick={this.togglePumpView}>\n          <h3>PUMP</h3>\n          </div>\n        </div>\n\n\n        {this.state.isViewingStaking ? <Staking toggle={this.toggleStakingView} /> : null}\n        {this.state.isViewingPump ? <Pump toggle={this.togglePumpView} /> : null}\n        <div className=\"social-box\">\n          <div className=\"social-icon git\" onClick={this.setNyanAddress}></div>\n          <a target=\"_blank\" href={\"https://www.twitter.com/nyanfinance\"}>\n            <div className=\"social-icon twit\"></div>\n          </a> \n          <a target=\"_blank\" href={\"https://t.me/nyanfinance\"}>\n            <div className=\"social-icon tele\"></div>\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}